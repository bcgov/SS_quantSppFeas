---
title: "Tree feasibility prediction with ML"
author: "William H MacKenzie, Courtney Collins"
format: pdf
editor: visual
---

```{r libraries}
#libraries 
library(tidyverse)
require(data.table)
require(rms)
require(rsample)
library(ordinalForest)
require(tictoc)

```

```{r load and clean data}
#load(file="data/tree_data_cleaned.Rdata") #cover data only 
load(file="../data/tree_data_cleaned_wzeros.Rdata") #with absences #update to OS path #13
tree_dat<-tree_dat_wzeros #rename
rm(tree_dat_wzeros)

#climate variables----

#get all climate variables 
vars<-climr::variables #look up table for vars 
var_names<-vars$Code
#add response variable and a few other preds to all climate data 
#var_names<-c("TotalA", "Species", "NutrientRegime_clean", "MoistureRegime_clean", "SlopeGradient", "Aspect", "year", "bgc" , "Elevation" ,var_names)

#subset predictor vars
#try using suite of 17 climate params from BGC projections (Ceres)
climrVars <- c("DD5", "DDsub0_at", "DDsub0_wt", "PPT_05", "PPT_06", "PPT_07", "PPT_08",
               "PPT_09", "CMD", "PPT_at", "PPT_wt", "CMD_07", "SHM", "AHM", "NFFD", "PAS", "CMI")

#derived vars (11)
climPredictors <- c("DD5", "DD_delayed", "PPT_MJ", "PPT_JAS", 
                    "CMD.total", "CMI", "CMDMax", "SHM", "AHM", "NFFD", "PAS")

var_names<-c(c("TotalA", "Species", "NutrientRegime_clean", "MoistureRegime_clean", "Species") , climPredictors)
#"Tmax_sm", "TD", "PPT_sm", "DD5_sp") 

#create dataset with all preds for rf model 
tree_dat_sub<- tree_dat |> dplyr::select(all_of(var_names))
tree_dat_sub<-na.omit(tree_dat_sub)  #remove NAs

#ordinal forest models----
# Convert totalA to an ordered factor
#breaks from plot data (explore_veg_data.R)
#newfeas  meds  mean
#       1    17 21.8 
#       2    10 16.2 
#       3     5  9.64
#       4     2  2   
#       5     2  4.67
rm(tree_dat)
gc()
## WHM  set zero cover to 5 rather than zero for the ordinal scale
tree_dat_sub <-mutate(tree_dat_sub, cover_rank=case_when(TotalA>20~1, 
                                                        TotalA>0 & TotalA<7.5~3,
                                                        TotalA==0~5, 
                                                        TRUE~2))
hist(tree_dat_sub$cover_rank)

group_by(tree_dat_sub, cover_rank)%>%summarise(counts=n())#about even for 1, 2,3
tree_dat_sub_unreduced <- tree_dat_sub 
tree_dat_sub <- tree_dat_sub_unreduced
#tree_dat_sub <- tree_dat_sub %>% group_by(cover_rank) %>% slice_sample(n=9133)##  reduce 5 category to the n=the max number of 1,2,3s
#set as ordinal factor
tree_dat_sub$cover_rank<-ordered(tree_dat_sub$cover_rank, levels = c(5, 3, 2, 1))
str(tree_dat_sub$cover_rank)#good 

#remove continuous response
tree_dat_sub$TotalA<-NULL

#remove NAs in moisture/nutrient regimes 
tree_dat_sub<- subset(tree_dat_sub, NutrientRegime_clean!="NA"& MoistureRegime_clean!="NA")

save(tree_dat_sub,file="../data/ordforest_data.Rdata")#17 climate vars
#save(tree_dat_sub,file="data/ordforest_data2.Rdata")#11 derived climate vars 


```

```{r ordinal forests regression}
#Fit the ordinal random forest model----
#load datasets
load(file="data/ordforest_data.Rdata")#17 climate vars
set.seed(1122)
# Split the dataset into training and testing sets
parts <- rsample::initial_split(tree_dat_sub, prop=0.7, strata = cover_rank)
train_data <- training(parts) %>% data.frame
test_data <- testing(parts) %>% data.frame
# use rms::orm to fit the ordinal regression model
#fit model
tic()
RFord <- ordfor(depvar = "cover_rank", data = train_data, ntreefinal = 100)
toc()
save(RFord, file="outputs/ordinalForest/RFordmodel.Rdata")



```

### import rules on range of CMD which equates to aSMR

```{r}
###for each wetter rSMR, previous CMD is divided by 2
rules <- read.csv("../data/aSMR_Rules_HalfStep_v12_30Dec2021.csv") %>% mutate(rSMR_rules = SMRLevel) %>% as.data.table
tree_dat_spp <- subset(tree_dat_sub, Species=="TSUGHET") %>% mutate(rSMR = MoistureRegime_clean)
new <- merge(tree_dat_spp, rules, by.x = c("rSMR"), by.y = c("rSMR_rules")) %>% rowwise() %>% filter(rSMR == SMRLevel, CMD.total >= CMD.min & CMD.total <CMD.max)


mutate(aSMR = ifelse(CMD >= CMD.min & CMD < CMD.max, aSMR, NA))
setDT(tree_dat_spp)[ , aSMR := ifelse(rSMR == SMRLevel & "CMD" >= "CMD.min" & "CMD" < "CMD.max"), rules$aSMR, NA]

setDT(tree_dat_spp)[setDT(rules), on = c("rSMR" = "SMRLevel", "CMD" >= "CMD.min", "CMD" < "CMD.max")]
# add aSMR to each row
for (i in 1:nrow(tree_dat_spp)){
tree_dat_spp$aSMR <- ifelse(match(tree_dat_spp$rSMR, rules$SMRLevel), rules$aSMR, NA)
  }
```

```{r ordinal forest classification}
#Fit the ordinal random forest model----
#load datasets
#load(file="data/ordforest_data.Rdata")#17 climate vars
#load(file="data/ordforest_data2.Rdata")#11 derived climate vars 
tree_dat_spp <- subset(tree_dat_sub, Species=="TSUGHET") %>% 
  mutate(rSMR = as.factor(MoistureRegime_clean), ordered = TRUE)# %>% levels(SNR) <- c("A", "B", "C", "D", "E") #subset to one species
set.seed(1122)
group_by(tree_dat_spp, cover_rank)%>%summarise(counts=n())
tree_dat_spp<- tree_dat_spp %>% group_by(cover_rank) %>% slice_sample(n=1000)

parts <- rsample::initial_split(tree_dat_spp, prop=0.7, strata = cover_rank)
train_data <- training(parts) %>% data.frame
test_data <- testing(parts) %>% data.frame
# Split the dataset into training and testing sets

tic()
RFord <- ordfor(depvar = "cover_rank", data = train_data, ntreefinal = 100)  
toc()
save(RFord, file="../models/RFordmodel_WHM.Rdata")
# Predict on the test set
preds <- predict(RFord, newdata=test_data)

#confusion matrix 
conf_mat<-table('true'=test_data$cover_rank, 'predicted'=preds$ypred) 
accuracy <- sum(diag(conf_mat)) / sum(conf_mat) #acc = 0.88
conf_mat

#plot CM for all data
conf_mat_df<-as.data.frame(conf_mat)
ggplot(data=conf_mat_df, aes(y = predicted, x=true, fill=Freq)) + 
  geom_tile()+ 
  ylab("Predicted") + xlab("Observed") +
  theme_bw()+  scale_fill_gradient(low="white", high="darkgreen")

ggplot(data=subset(conf_mat_df,  predicted!=0 & true!=0), aes(y = predicted, x=true, fill=Freq)) + 
  geom_tile()+ 
  ylab("Predicted") + xlab("Observed") +
  theme_bw()+  scale_fill_gradient(low="white", high="darkgreen")

#look at feature importance 
importancedf<-as.data.frame(RFord$varimp)
```

```{r ordinal forest classification}
#train model on ALL data 
#try fitting ordinal forest for one species & zonal (Hw)
tree_dat_sub_Hwzonal<-subset(tree_dat_sub, Species=="TSUGHET"& NutrientRegime_clean=="C")%>%subset(MoistureRegime_clean=="4"|MoistureRegime_clean=="3")
#tree_dat_sub_Hwzonal<-dplyr::select(tree_dat_sub_Hwzonal, -Species, -NutrientRegime_clean, -MoistureRegime_clean) #remove categorical vars
set.seed(1122)
parts <- rsample::initial_split(tree_dat_sub_Hwzonal, prop=0.7, strata = cover_rank)
train_data <- training(parts) %>% data.frame
test_data <- testing(parts) %>% data.frame
tic()
RFord <- ordfor(depvar = "cover_rank", mtry=14, data = train_data, ntreefinal = 100)  
toc()
save(RFord, file="../models/RFordmodelHwZonal.Rdata")

#predict on i.e. fitted values
preds <- predict(RFord, newdata=test_data)
fitted<-preds$ypred
#confusion matrix 
conf_mat<-table('true'=test_data$cover_rank, 'predicted'=preds$ypred) 
accuracy <- sum(diag(conf_mat)) / sum(conf_mat) #acc = 0.997
conf_mat 

#plot CM for all data
conf_mat_df<-as.data.frame(conf_mat)
ggplot(data=conf_mat_df, aes(y = predicted, x=true, fill=Freq)) + 
  geom_tile()+ 
  ylab("Predicted") + xlab("Observed") +
  theme_bw()+  scale_fill_gradient(low="white", high="darkgreen")

#for non- zeroes- mis predicts 2s as 1s
conf_mat_df_sub<-subset(conf_mat_df, predicted!=0 & true!=0)

ggplot(data=conf_mat_df_sub, aes(y = predicted, x=true, fill=Freq)) + 
  geom_tile()+ 
  ylab("Predicted") + xlab("Observed") +
  theme_bw()+  scale_fill_gradient(low="white", high="darkgreen")

#try fitting ordinal forest for one spp (all edatopes)
tree_dat_sub_Hw<-subset(tree_dat_sub, Species=="TSUGHET")
tree_dat_sub_Hw$Species<-NULL
RFordHw2 <- ordfor(depvar = "cover_rank", mtry=13, data = tree_dat_sub_Hw, ntreefinal = 1000)  
save(RFordHw2, file="outputs/ordinalForest/RFordmodelHw2.Rdata")

preds <- predict(RFordHw2, newdata=tree_dat_sub_Hw)
predszonal <- predict(RFordHw2, newdata=tree_dat_sub_Hwzonal)

#confusion matrix 
conf_mat<-table('true'=tree_dat_sub_Hw$cover_rank, 'predicted'=preds$ypred) 
accuracy <- sum(diag(conf_mat)) / sum(conf_mat) #acc = 0.997

#now try predicting just one edatope
tree_dat_sub_Hwzonal<-subset(tree_dat_sub_Hw, NutrientRegime_clean=="C")%>%subset(MoistureRegime_clean=="4"|MoistureRegime_clean=="3")
preds <- predict(RFordHw2, newdata=tree_dat_sub_Hwzonal)
#confusion matrix 
conf_mat<-table('true'=tree_dat_sub_Hwzonal$cover_rank, 'predicted'=predszonal$ypred) 
accuracy <- sum(diag(conf_mat)) / sum(conf_mat) #acc = 0.71
conf_mat

```
